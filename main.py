import asyncio
import logging
import sqlite3
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler

BOT_TOKEN = "8004087167:AAEeWgNFJhBPZ4sDIFRpmq7KyIZSwr6D8lk"
logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
DB_NAME = "users.db"

def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            birth_date TEXT,
            zodiac TEXT,
            eastern TEXT,
            lang TEXT DEFAULT 'ru',
            subscribed INTEGER DEFAULT 0
        )
    ''')
    conn.commit()
    conn.close()

def add_user(user_id, birth_date, zodiac, eastern):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO users (user_id, birth_date, zodiac, eastern, lang, subscribed) VALUES (?, ?, ?, ?, "ru", 0)',
              (user_id, birth_date, zodiac, eastern))
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    row = c.fetchone()
    conn.close()
    return row

def set_lang(user_id, lang):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('UPDATE users SET lang = ? WHERE user_id = ?', (lang, user_id))
    conn.commit()
    conn.close()

def toggle_subscribe(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('UPDATE users SET subscribed = 1 - subscribed WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()

def get_subscribed_users():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT user_id FROM users WHERE subscribed = 1')
    users = [row[0] for row in c.fetchall()]
    conn.close()
    return users

# –ì–æ—Ä–æ—Å–∫–æ–ø
def get_zodiac(day, month):
    if (month == 3 and day >= 21) or (month == 4 and day <= 19): return "–û–≤–µ–Ω"
    if (month == 4 and day >= 20) or (month == 5 and day <= 20): return "–¢–µ–ª–µ—Ü"
    if (month == 5 and day >= 21) or (month == 6 and day <= 21): return "–ë–ª–∏–∑–Ω–µ—Ü—ã"
    if (month == 6 and day >= 22) or (month == 7 and day <= 22): return "–†–∞–∫"
    if (month == 7 and day >= 23) or (month == 8 and day <= 22): return "–õ–µ–≤"
    if (month == 8 and day >= 23) or (month == 9 and day <= 22): return "–î–µ–≤–∞"
    if (month == 9 and day >= 23) or (month == 10 and day <= 23): return "–í–µ—Å—ã"
    if (month == 10 and day >= 24) or (month == 11 and day <= 22): return "–°–∫–æ—Ä–ø–∏–æ–Ω"
    if (month == 11 and day >= 23) or (month == 12 and day <= 21): return "–°—Ç—Ä–µ–ª–µ—Ü"
    if (month == 12 and day >= 22) or (month == 1 and day <= 19): return "–ö–æ–∑–µ—Ä–æ–≥"
    if (month == 1 and day >= 20) or (month == 2 and day <= 18): return "–í–æ–¥–æ–ª–µ–π"
    return "–†—ã–±—ã"

def get_eastern(year):
    animals = ["–û–±–µ–∑—å—è–Ω–∞", "–ü–µ—Ç—É—Ö", "–°–æ–±–∞–∫–∞", "–°–≤–∏–Ω—å—è", "–ö—Ä—ã—Å–∞", "–ë—ã–∫", "–¢–∏–≥—Ä", "–ö—Ä–æ–ª–∏–∫", "–î—Ä–∞–∫–æ–Ω", "–ó–º–µ—è", "–õ–æ—à–∞–¥—å", "–ö–æ–∑–∞"]
    return animals[(year - 1900) % 12]

def get_fortune():
    return random.choice([
        "–°–µ–≥–æ–¥–Ω—è —É–¥–∞—á–∞ –≤ –º–µ–ª–æ—á–∞—Ö.",
        "–ù–µ –±–æ–π—Ç–µ—Å—å —Ä–∏—Å–∫–æ–≤–∞—Ç—å ‚Äî –∑–≤—ë–∑–¥—ã –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.",
        "–õ—é–±–æ–≤—å —Å—Ç—É—á–∏—Ç—Å—è –≤ –¥–≤–µ—Ä—å. –û—Ç–∫—Ä–æ–π—Ç–µ.",
        "–î–µ–Ω—å –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è –Ω–æ–≤—ã—Ö –Ω–∞—á–∏–Ω–∞–Ω–∏–π."
    ])

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def days_kb():
    kb = InlineKeyboardMarkup(row_width=7)
    for d in range(1, 32):
        kb.add(InlineKeyboardButton(str(d), callback_data=f"day_{d}"))
    return kb

def months_kb():
    kb = InlineKeyboardMarkup(row_width=3)
    months = ["–Ø–Ω–≤", "–§–µ–≤", "–ú–∞—Ä", "–ê–ø—Ä", "–ú–∞–π", "–ò—é–Ω", "–ò—é–ª", "–ê–≤–≥", "–°–µ–Ω", "–û–∫—Ç", "–ù–æ—è", "–î–µ–∫"]
    for i, m in enumerate(months):
        kb.add(InlineKeyboardButton(m, callback_data=f"month_{i+1}"))
    return kb

def years_kb():
    kb = InlineKeyboardMarkup(row_width=4)
    for y in range(2005, 1919, -1):
        kb.add(InlineKeyboardButton(str(y), callback_data=f"year_{y}"))
        if len(kb.inline_keyboard[-1]) == 4:
            break
    return kb

def main_menu(lang='ru'):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è" if lang=='ru' else "Today", callback_data="today"))
    kb.add(InlineKeyboardButton("–§–æ—Ä—Ç—É–Ω–∞" if lang=='ru' else "Fortune", callback_data="fortune"))
    kb.add(InlineKeyboardButton("–Ø–∑—ã–∫ / Lang", callback_data="lang"))
    kb.add(InlineKeyboardButton("–ü–æ–¥–ø–∏—Å–∫–∞" if lang=='ru' else "Subscribe", callback_data="subscribe"))
    return kb

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    user = get_user(message.from_user.id)
    if user:
        lang = user[4] if len(user) > 4 else 'ru'
        await message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu(lang))
        return
    await message.answer("üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:", reply_markup=days_kb())

@dp.callback_query_handler(lambda c: c.data.startswith('day_'))
async def select_day(call: types.CallbackQuery):
    day = call.data.split('_')[1]
    await dp.current_state(user=call.from_user.id).set_data({"day": day})
    await call.message.edit_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=months_kb())

@dp.callback_query_handler(lambda c: c.data.startswith('month_'))
async def select_month(call: types.CallbackQuery):
    state = dp.current_state(user=call.from_user.id)
    data = await state.get_data()
    data["month"] = call.data.split('_')[1]
    await state.set_data(data)
    await call.message.edit_text("üéÇ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=years_kb())

@dp.callback_query_handler(lambda c: c.data.startswith('year_'))
async def select_year(call: types.CallbackQuery):
    state = dp.current_state(user=call.from_user.id)
    data = await state.get_data()
    data["year"] = call.data.split('_')[1]
    await state.finish()

    day = int(data["day"])
    month = int(data["month"])
    year = int(data["year"])
    zodiac = get_zodiac(day, month)
    eastern = get_eastern(year)

    add_user(call.from_user.id, f"{day}.{month}.{year}", zodiac, eastern)

    await call.message.edit_text(
        f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üìÖ –î–∞—Ç–∞: {day}.{month}.{year}\n"
        f"‚ôà –ó–Ω–∞–∫: {zodiac}\n"
        f"üêâ –í–æ—Å—Ç–æ—á–Ω—ã–π: {eastern}"
    )
    await asyncio.sleep(1)
    await call.message.answer("üîÆ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())

# –ú–µ–Ω—é
@dp.callback_query_handler(lambda c: c.data == "today")
async def today_horoscope(call: types.CallbackQuery):
    user = get_user(call.from_user.id)
    if user:
        await call.message.edit_text(f"üåü –ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è {user[2]}:\n\n–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π!")

@dp.callback_query_handler(lambda c: c.data == "fortune")
async def fortune(call: types.CallbackQuery):
    await call.message.edit_text(f"üé° –ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã:\n\n{get_fortune()}")
    await asyncio.sleep(2)
    lang = get_user(call.from_user.id)[4] if get_user(call.from_user.id) else 'ru'
    await call.message.answer("–ú–µ–Ω—é:", reply_markup=main_menu(lang))

@dp.callback_query_handler(lambda c: c.data == "lang")
async def change_lang(call: types.CallbackQuery):
    user = get_user(call.from_user.id)
    new_lang = 'en' if (user and user[4] == 'ru') else 'ru'
    set_lang(call.from_user.id, new_lang)
    await call.message.edit_text(f"üåê –Ø–∑—ã–∫: {new_lang.upper()}")
    await asyncio.sleep(1)
    await call.message.answer("Menu:", reply_markup=main_menu(new_lang))

@dp.callback_query_handler(lambda c: c.data == "subscribe")
async def subscribe_btn(call: types.CallbackQuery):
    toggle_subscribe(call.from_user.id)
    lang = get_user(call.from_user.id)[4] if get_user(call.from_user.id) else 'ru'
    status = "–≤–∫–ª—é—á–µ–Ω–∞" if get_user(call.from_user.id)[5] else "–æ—Ç–∫–ª—é—á–µ–Ω–∞"
    await call.message.edit_text(f"üì© –ü–æ–¥–ø–∏—Å–∫–∞ {status}!")
    await asyncio.sleep(1)
    await call.message.answer("–ú–µ–Ω—é:", reply_markup=main_menu(lang))

# –ö–æ–º–∞–Ω–¥—ã
@dp.message_handler(commands=['subscribe'])
async def subscribe_cmd(message: types.Message):
    toggle_subscribe(message.from_user.id)
    await message.answer("üì© –ü–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞!")

@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe_cmd(message: types.Message):
    toggle_subscribe(message.from_user.id)
    await message.answer("üì© –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!")

@dp.message_handler(commands=['myinfo'])
async def myinfo(message: types.Message):
    user = get_user(message.from_user.id)
    if user:
        await message.answer(f"üìã –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n–î–∞—Ç–∞: {user[1]}\n–ó–Ω–∞–∫: {user[2]}\n–í–æ—Å—Ç–æ—á–Ω—ã–π: {user[3]}")
    else:
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–∞–ø–∏—à–∏—Ç–µ /start")

# –†–∞—Å—Å—ã–ª–∫–∞
async def daily_horoscope():
    users = get_subscribed_users()
    for uid in users:
        try:
            user = get_user(uid)
            await bot.send_message(uid, f"üåÖ –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!\n–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {user[2]} –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n\n–•–æ—Ä–æ—à–∏–π –¥–µ–Ω—å!")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")

# === –ó–ê–ü–£–°–ö ===
async def on_startup(_):
    init_db()
    scheduler.start()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

if __name__ == '__main__':
    dp.run_polling(bot, skip_updates=True, on_startup=on_startup)
